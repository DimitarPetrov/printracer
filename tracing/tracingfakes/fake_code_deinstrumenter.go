// Code generated by counterfeiter. DO NOT EDIT.
package tracingfakes

import (
	"go/ast"
	"go/token"
	"io"
	"sync"

	"github.com/DimitarPetrov/printracer/tracing"
)

type FakeCodeDeinstrumenter struct {
	DeinstrumentDirectoryStub        func(string) error
	deinstrumentDirectoryMutex       sync.RWMutex
	deinstrumentDirectoryArgsForCall []struct {
		arg1 string
	}
	deinstrumentDirectoryReturns struct {
		result1 error
	}
	deinstrumentDirectoryReturnsOnCall map[int]struct {
		result1 error
	}
	DeinstrumentFileStub        func(*token.FileSet, *ast.File, io.Writer) error
	deinstrumentFileMutex       sync.RWMutex
	deinstrumentFileArgsForCall []struct {
		arg1 *token.FileSet
		arg2 *ast.File
		arg3 io.Writer
	}
	deinstrumentFileReturns struct {
		result1 error
	}
	deinstrumentFileReturnsOnCall map[int]struct {
		result1 error
	}
	DeinstrumentPackageStub        func(*token.FileSet, *ast.Package) error
	deinstrumentPackageMutex       sync.RWMutex
	deinstrumentPackageArgsForCall []struct {
		arg1 *token.FileSet
		arg2 *ast.Package
	}
	deinstrumentPackageReturns struct {
		result1 error
	}
	deinstrumentPackageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentDirectory(arg1 string) error {
	fake.deinstrumentDirectoryMutex.Lock()
	ret, specificReturn := fake.deinstrumentDirectoryReturnsOnCall[len(fake.deinstrumentDirectoryArgsForCall)]
	fake.deinstrumentDirectoryArgsForCall = append(fake.deinstrumentDirectoryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeinstrumentDirectory", []interface{}{arg1})
	fake.deinstrumentDirectoryMutex.Unlock()
	if fake.DeinstrumentDirectoryStub != nil {
		return fake.DeinstrumentDirectoryStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deinstrumentDirectoryReturns
	return fakeReturns.result1
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentDirectoryCallCount() int {
	fake.deinstrumentDirectoryMutex.RLock()
	defer fake.deinstrumentDirectoryMutex.RUnlock()
	return len(fake.deinstrumentDirectoryArgsForCall)
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentDirectoryCalls(stub func(string) error) {
	fake.deinstrumentDirectoryMutex.Lock()
	defer fake.deinstrumentDirectoryMutex.Unlock()
	fake.DeinstrumentDirectoryStub = stub
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentDirectoryArgsForCall(i int) string {
	fake.deinstrumentDirectoryMutex.RLock()
	defer fake.deinstrumentDirectoryMutex.RUnlock()
	argsForCall := fake.deinstrumentDirectoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentDirectoryReturns(result1 error) {
	fake.deinstrumentDirectoryMutex.Lock()
	defer fake.deinstrumentDirectoryMutex.Unlock()
	fake.DeinstrumentDirectoryStub = nil
	fake.deinstrumentDirectoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentDirectoryReturnsOnCall(i int, result1 error) {
	fake.deinstrumentDirectoryMutex.Lock()
	defer fake.deinstrumentDirectoryMutex.Unlock()
	fake.DeinstrumentDirectoryStub = nil
	if fake.deinstrumentDirectoryReturnsOnCall == nil {
		fake.deinstrumentDirectoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deinstrumentDirectoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentFile(arg1 *token.FileSet, arg2 *ast.File, arg3 io.Writer) error {
	fake.deinstrumentFileMutex.Lock()
	ret, specificReturn := fake.deinstrumentFileReturnsOnCall[len(fake.deinstrumentFileArgsForCall)]
	fake.deinstrumentFileArgsForCall = append(fake.deinstrumentFileArgsForCall, struct {
		arg1 *token.FileSet
		arg2 *ast.File
		arg3 io.Writer
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeinstrumentFile", []interface{}{arg1, arg2, arg3})
	fake.deinstrumentFileMutex.Unlock()
	if fake.DeinstrumentFileStub != nil {
		return fake.DeinstrumentFileStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deinstrumentFileReturns
	return fakeReturns.result1
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentFileCallCount() int {
	fake.deinstrumentFileMutex.RLock()
	defer fake.deinstrumentFileMutex.RUnlock()
	return len(fake.deinstrumentFileArgsForCall)
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentFileCalls(stub func(*token.FileSet, *ast.File, io.Writer) error) {
	fake.deinstrumentFileMutex.Lock()
	defer fake.deinstrumentFileMutex.Unlock()
	fake.DeinstrumentFileStub = stub
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentFileArgsForCall(i int) (*token.FileSet, *ast.File, io.Writer) {
	fake.deinstrumentFileMutex.RLock()
	defer fake.deinstrumentFileMutex.RUnlock()
	argsForCall := fake.deinstrumentFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentFileReturns(result1 error) {
	fake.deinstrumentFileMutex.Lock()
	defer fake.deinstrumentFileMutex.Unlock()
	fake.DeinstrumentFileStub = nil
	fake.deinstrumentFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentFileReturnsOnCall(i int, result1 error) {
	fake.deinstrumentFileMutex.Lock()
	defer fake.deinstrumentFileMutex.Unlock()
	fake.DeinstrumentFileStub = nil
	if fake.deinstrumentFileReturnsOnCall == nil {
		fake.deinstrumentFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deinstrumentFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentPackage(arg1 *token.FileSet, arg2 *ast.Package) error {
	fake.deinstrumentPackageMutex.Lock()
	ret, specificReturn := fake.deinstrumentPackageReturnsOnCall[len(fake.deinstrumentPackageArgsForCall)]
	fake.deinstrumentPackageArgsForCall = append(fake.deinstrumentPackageArgsForCall, struct {
		arg1 *token.FileSet
		arg2 *ast.Package
	}{arg1, arg2})
	fake.recordInvocation("DeinstrumentPackage", []interface{}{arg1, arg2})
	fake.deinstrumentPackageMutex.Unlock()
	if fake.DeinstrumentPackageStub != nil {
		return fake.DeinstrumentPackageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deinstrumentPackageReturns
	return fakeReturns.result1
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentPackageCallCount() int {
	fake.deinstrumentPackageMutex.RLock()
	defer fake.deinstrumentPackageMutex.RUnlock()
	return len(fake.deinstrumentPackageArgsForCall)
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentPackageCalls(stub func(*token.FileSet, *ast.Package) error) {
	fake.deinstrumentPackageMutex.Lock()
	defer fake.deinstrumentPackageMutex.Unlock()
	fake.DeinstrumentPackageStub = stub
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentPackageArgsForCall(i int) (*token.FileSet, *ast.Package) {
	fake.deinstrumentPackageMutex.RLock()
	defer fake.deinstrumentPackageMutex.RUnlock()
	argsForCall := fake.deinstrumentPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentPackageReturns(result1 error) {
	fake.deinstrumentPackageMutex.Lock()
	defer fake.deinstrumentPackageMutex.Unlock()
	fake.DeinstrumentPackageStub = nil
	fake.deinstrumentPackageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCodeDeinstrumenter) DeinstrumentPackageReturnsOnCall(i int, result1 error) {
	fake.deinstrumentPackageMutex.Lock()
	defer fake.deinstrumentPackageMutex.Unlock()
	fake.DeinstrumentPackageStub = nil
	if fake.deinstrumentPackageReturnsOnCall == nil {
		fake.deinstrumentPackageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deinstrumentPackageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCodeDeinstrumenter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deinstrumentDirectoryMutex.RLock()
	defer fake.deinstrumentDirectoryMutex.RUnlock()
	fake.deinstrumentFileMutex.RLock()
	defer fake.deinstrumentFileMutex.RUnlock()
	fake.deinstrumentPackageMutex.RLock()
	defer fake.deinstrumentPackageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCodeDeinstrumenter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tracing.CodeDeinstrumenter = new(FakeCodeDeinstrumenter)
